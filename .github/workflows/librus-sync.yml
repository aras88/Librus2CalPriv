name: Librus Calendar Sync

# Kiedy uruchamiaƒá workflow
on:
  # Rƒôczne uruchomienie z GitHub UI
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

  # Automatycznie codziennie o 7:00 UTC (8:00 lub 9:00 w Polsce)
  schedule:
    - cron: '0 7 * * *'

  # Na push do main (dla test√≥w)
  push:
    branches: [main]
    paths:
      - 'tests/**'
      - '.github/workflows/**'

jobs:
  sync:
    name: Sync Librus to Calendar
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. Cache Playwright browsers
      - name: üì¶ Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      # 4. Install dependencies
      - name: üìö Install dependencies
        run: npm ci

      # 5. Install Playwright browsers if not cached
      - name: üåê Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run install-browsers

      # 6. Run sync script
      - name: üîÑ Run Librus sync
        env:
          LIBRUS_USERNAME: ${{ secrets.LIBRUS_USERNAME }}
          LIBRUS_PASSWORD: ${{ secrets.LIBRUS_PASSWORD }}
          HEADLESS: ${{ github.event.inputs.debug == 'true' && 'false' || 'true' }}
        run: npm test

      # 7. Upload test artifacts (screenshots, videos, traces, reports)
      - name: üì∏ Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_number }}
          path: |
            *.png
            sync-results.json
            trace.zip
            videos/
            playwright-report/
            test-results.json
            debug-*.png
          retention-days: 7

      # 8. Upload HTML Report separately for easy access
      - name: üìä Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

      # 9. Show sync results
      - name: üìä Show sync results
        if: always()
        run: |
          if [ -f sync-results.json ]; then
            echo "Sync Results:"
            cat sync-results.json | jq '.'
          fi

      # 10. Create issue on failure
      - name: üö® Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `Librus sync failed - ${date}`;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'sync-failure'
            });

            const existingIssue = issues.data.find(i => i.title === title);

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: `Librus sync failed on ${date}.\n\nCheck the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
                labels: ['sync-failure', 'automated']
              });
            }

  # Optional: Send notification
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: sync
    if: always()

    steps:
      - name: üìÆ Send notification
        run: |
          if [ "${{ needs.sync.result }}" == "success" ]; then
            echo "‚úÖ Sync completed successfully"
            # Here you could send email, Discord, Slack notification etc.
          else
            echo "‚ùå Sync failed"
            # Send failure notification
          fi